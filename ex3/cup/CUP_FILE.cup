/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code{:
	public Lexer lexer;

	public Parser(Lexer lexer){
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/

terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal TIMES;
terminal PLUS;
terminal MINUS;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal TYPE_STRING;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;

non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;

non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_BINOP BINOP;

non terminal AST_STMT_LIST stmtList;
non terminal AST_ARG_LIST argList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_EXP_LIST expList;
non terminal AST_ARG arg;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/


Program	::=
            dec:d	Program:p           {: RESULT = new AST_PROGRAM(d,p, dleft);    :}
            |dec:d                      {: RESULT = new AST_PROGRAM(d,null,dleft); :}
           ;


dec ::=
            varDec:v           {: RESULT = new AST_DEC_VARDEC(v, vleft); :}
        	|funcDec:f           {: RESULT = new AST_DEC_FUNCDEC(f, fleft); :}
        	|classDec:c          {: RESULT = new AST_DEC_CLASSDEC(c, cleft); :}
        	|arrayTypedef:a          {: RESULT = new AST_DEC_ARRAYTYPEDEF(a, aleft); :}
        	;

type ::=
            TYPE_INT:x           {:RESULT = new AST_TYPE("int", xleft);:}
            |TYPE_STRING:x            {: RESULT = new AST_TYPE("string", xleft); :}
            |TYPE_VOID:x             {: RESULT = new AST_TYPE("void", xleft); :}
            |ID:t           {: RESULT = new AST_TYPE(t, tleft); :}
            ;


arrayTypedef ::= ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON            {:RESULT = new AST_ARRAYTYPEDEF(name, t, tleft);:};


varDec ::=
            type:t     ID:name SEMICOLON             {:RESULT = new AST_VARDEC(t,name,null,null, tleft);:}
           |type:t     ID:name     ASSIGN exp:exp SEMICOLON            {:RESULT = new AST_VARDEC(t,name,exp,null,tleft);:}
           |type:t     ID:name     ASSIGN newExp:exp SEMICOLON              {:RESULT = new AST_VARDEC(t,name,null,exp,tleft);:}
           ;


funcDec ::=
             type:t     ID:name     LPAREN RPAREN LBRACE stmtList:lst RBRACE                {:RESULT = new AST_FUNCDEC(t, name, null, lst,tleft);:}
             |type:t     ID:name     LPAREN argList:args RPAREN LBRACE stmtList:lst RBRACE   {:RESULT = new AST_FUNCDEC(t, name, args, lst, tleft);:}
            ;


classDec ::=
             CLASS ID:name LBRACE cFieldList:lst RBRACE             {:RESULT = new AST_CLASSDEC(name, null, lst, nameleft);:}
            |CLASS ID:name EXTENDS ID:parentClass LBRACE cFieldList :lst RBRACE             {:RESULT = new AST_CLASSDEC(name, parentClass, lst, nameleft);:}
            ;



exp ::=
             var:v          {:RESULT = new AST_EXP_VAR(v,vleft);:}
            |LPAREN exp:exp RPAREN              {:RESULT = new AST_EXP_LEXPR(exp,expleft);:}
            |exp:e1 BINOP:OP exp:e2 			{: RESULT = new AST_EXP_BINOP(e1,e2,OP.OP, e1left);   :}

            |ID:fname LPAREN RPAREN             {:RESULT = new AST_EXP_FUNC(null,fname,null,fnameleft);:}
            |ID:fname LPAREN expList:args RPAREN            {:RESULT = new AST_EXP_FUNC(null,fname,args,fnameleft);:}
            |var:v DOT ID:name LPAREN RPAREN           {:RESULT = new AST_EXP_FUNC(v, name,null,vleft);:}
            |var:v DOT ID:name LPAREN expList:args RPAREN          {:RESULT = new AST_EXP_FUNC(v, name,args,vleft);:}



            |INT:i          {: RESULT = new AST_EXP_INT(i,ileft); :}
           	|MINUS INT:i            {: RESULT = new AST_EXP_INT(-i,ileft); :}
           	|NIL:i               {:RESULT = new AST_EXP_NIL(ileft);:}
           	|STRING:s           {: RESULT = new AST_EXP_STRING(s,sleft);       :}
            ;



var ::=
            ID:name             {:RESULT = new AST_VAR_SIMPLE(name,nameleft);:}
            |var:v DOT ID:name              {:RESULT = new AST_VAR_FIELD(v,name, vleft);:}
            |var:v LBRACK exp:exp RBRACK            {:RESULT = new AST_VAR_SUBSCRIPT(v, exp, vleft);:}

            ;


stmt			::= varDec:vd					            {: RESULT = new  AST_STMT_DEC_VAR(vd, vdleft);       :}
					| var:v  ASSIGN exp:e SEMICOLON			{: RESULT = new AST_STMT_ASSIGN(v,e,null, eleft);     :}
					| var:v  ASSIGN newExp:ne SEMICOLON		{: RESULT = new AST_STMT_ASSIGN(v,null,ne, vleft);:}

					| RETURN:x SEMICOLON				{: RESULT = new AST_STMT_RETURN(null, xleft);     :} // add line

					| RETURN exp:e SEMICOLON			{: RESULT = new AST_STMT_RETURN(e,eleft);     :}
					| IF LPAREN exp:e RPAREN LBRACE stmtList:sr RBRACE	{: RESULT = new AST_STMT_IF(e,sr,eleft);     :}
					| WHILE LPAREN exp:e RPAREN LBRACE stmtList:sr RBRACE	{: RESULT = new AST_STMT_WHILE(e,sr,eleft);     :}

					| ID:name LPAREN RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,null,null,nameleft);      	 :}
					| ID:name LPAREN expList:et RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,null,et,nameleft);      	 :}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON	{: RESULT = new AST_STMT_FUNCCALL(name,v,null,vleft);      	 :}
					| var:v DOT ID:name LPAREN expList:et RPAREN SEMICOLON{:RESULT = new AST_STMT_FUNCCALL(name,v,et,nameleft);      :}
					;


newExp ::=
            NEW type:t          {:RESULT = new AST_NEW_EXP(t,null, tleft);:}
            |NEW type:t LBRACK exp:exp RBRACK           {:RESULT = new AST_NEW_EXP(t,exp, tleft);:}
            ;


cField ::=
            varDec:v           {: RESULT = new AST_CFIELD_DEC_VAR(v,vleft); :}
            |funcDec:f           {: RESULT = new AST_CFIELD_DEC_FUNC(f,fleft); :}
            ;


arg ::=
            type:t ID:name          {: RESULT = new AST_ARG(t, name,tleft); :}
		    ;


stmtList ::=
             stmt:s         {:RESULT = new AST_STMT_LIST(s,null,sleft);:}
            |stmt:s stmtList:lst            {:RESULT = new AST_STMT_LIST(s,lst,sleft);:}
            ;


argList ::=
            arg:a           {:RESULT = new AST_ARG_LIST(a,null, aleft);:}
            |arg:a1 COMMA argList:lst           {:RESULT = new AST_ARG_LIST(a1,lst, a1left);:}
            ;


cFieldList ::=
                cField:cf          {: RESULT = new AST_CFIELD_LIST(cf,null, 	cfleft); :}
                |cField:cf	cFieldList:lst          {: RESULT = new AST_CFIELD_LIST(cf,lst, cfleft);:}
                ;


expList	::=
			exp:exp COMMA expList:lst          {: RESULT = new AST_EXP_LIST(exp,lst, expleft);:}
		    |exp:exp            {: RESULT = new AST_EXP_LIST(exp,null, expleft); :}
		    ;


BINOP ::=             PLUS:L						{: RESULT = new AST_BINOP(0, Lleft);      :}
					| MINUS:L					{: RESULT = new AST_BINOP(1,Lleft);       :}
					| TIMES:L						{: RESULT = new AST_BINOP(2,Lleft);       :}
					| DIVIDE:L					{: RESULT = new AST_BINOP(3,Lleft);       :}
					| LT:L						{: RESULT = new AST_BINOP(4,Lleft);       :}
					| GT:L						{: RESULT = new AST_BINOP(5,Lleft);       :}
					| EQ:L						{: RESULT = new AST_BINOP(6,Lleft);       :}
					;
